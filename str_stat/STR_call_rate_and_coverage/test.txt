import re
from Bio import SeqIO
from pathlib import Path
from collections import OrderedDict
pathway=Path('/home/tanxy/db/RiceVarMap2/TandemRepeatmethod/eachchro/allLastresultnew')
p=re.compile(r'\d+')
totaldt=OrderedDict()
recdt={}
for rec in SeqIO.parse(r'Nipponbare.fa', 'fasta'):
    recdt.setdefault(rec.id,rec.seq)
Flag=True
for files in pathway.glob('Lastresultchr*STRoutputoutput.csv'):
    totaldt=OrderedDict()
    with open(files,'r') as r:
        refchrom=str(int(p.search(files.name).group()))
        print(refchrom)
        # print(files.name)
        for line in r:
            if line.startswith('\n'):
                continue
            elif line.startswith('vg'):
                fline= line.strip().split(',')
                variantpos=int(p.search(fline[0]).group()[2:])
                startpos=int(fline[-2])
                endpos=int(fline[-1])
            elif line.startswith('ref'):#vg0900314500
                threekrefseq=line.strip().split(',')[-1]
            elif line.startswith('seq'):
                if variantpos <=startpos:
                    if variantpos - 1 + len(threekrefseq) > endpos+3-1:
                        refseq = recdt.get(refchrom)[variantpos - 3 - 1:variantpos - 1 + len(threekrefseq)]
                        threekseq = recdt.get(refchrom)[variantpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                            refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                    else:
                        refseq = recdt.get(refchrom)[variantpos - 3 - 1:endpos + 3 - 1]
                        threekseq = recdt.get(refchrom)[
                                    variantpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                            refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                else:
                    if variantpos - 1 + len(threekrefseq) > endpos + 3 - 1:
                        refseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1 + len(threekrefseq)]
                        threekseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                            refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                    else:
                        refseq = recdt.get(refchrom)[startpos - 3 - 1:endpos + 3 - 1]
                        threekseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                totaldt.setdefault(f'{fline[0]}-ref', [refseq])
                totaldt.setdefault(f'{fline[0]}-threek', [threekseq])
            elif line.startswith('period'):
                if Flag==False:
                    Flag=True
                    continue
                period=line.strip().split(',')[1]
                totaldt.setdefault(f'{fline[0]}-ref', []).append(period)
                totaldt.setdefault(f'{fline[0]}-threek', []).append(period)
    with open(f'{files.name[:-4]}forTRF.txt','w') as w:
        for k,v in totaldt.items():
            # try:
            w.write(f'>{k}-{v[1]}\n{v[0]}\n')
            # except IndexError:
            #     continue
			


import re
from Bio import SeqIO
from pathlib import Path
from collections import OrderedDict
pathway=Path('/home/tanxy/3krice/01.bwamem/gatkres/HipSTR')
p=re.compile(r'\d+')
totaldt=OrderedDict()
recdt={}
for rec in SeqIO.parse(r'/home/tanxy/3krice/01.bwamem/gatkres/HipSTR/TRFzhuanshu/Nipponbare.fa', 'fasta'):
    recdt.setdefault(rec.id,rec.seq)
threekrefdt={}
# with open('ref.txt','w') as w:
with open('/home/tanxy/3krice/01.bwamem/gatkres/HipSTR/TRFzhuanshu/extractZS97_MH63_nip_of_hipstr/ref.vcf', 'r') as r:
    r.readline()  # Skip the header line
    for line in r:
        fline = line.strip().split('\t')
        refseq = fline[3]
        altseqls = fline[4].split(',')
        nip=fline[-3].split(':')[0].split('|')
        # zs97=fline[-2].split(':')[0].split('|')
        # mh63=fline[-1].split(':')[0].split('|')
        skip_line = False  # 设置标志变量

        for each in altseqls:
            if each == '.':
                skip_line = True  # 如果遇到'.'，设置标志为True
                break  # 跳出当前的最内层循环

        if skip_line:  # 检查标志
            continue  # 如果标志为True，则跳过外层循环的当前迭代
        if nip[0]=='./.':
            continue
        elif '.' in nip[0]:
            continue
        else:
            # print(nip)
            if nip[0]==nip[1]:
                if nip[0]=='0':
                    threekrefdt.setdefault(fline[0],{}).setdefault(fline[1],refseq)
                else:
                    threekrefdt.setdefault(fline[0], {}).setdefault(fline[1], altseqls[int(nip[0])-1])
    # w.write('chrom\tSTRname\tsequence\n')
    # for k,v in threekrefdt.items():
    #     for k1,v1 in v.items():
    #         w.write(f'{k}\t{k1}\t{v1}\n')


Flag=True
for files in pathway.glob('leaveonefilterhipstrmergechrom*.csv'):
    totaldt=OrderedDict()
    with open(files,'r') as r:
        refchrom=str(int(p.search(files.name).group()))
        print(refchrom)
        # print(files.name)
        for line in r:
            if line.startswith('\n'):
                continue
            elif line.startswith('STR'):
                fline= line.strip().split(',')
                variantpos=int(p.search(fline[0]).group()[2:])
                startpos=int(fline[-2])
                endpos=int(fline[-1])
            elif line.startswith('period'):
                if threekrefdt.get(refchrom).get(str(variantpos)):
                    threekrefseq = threekrefdt.get(refchrom).get(str(variantpos))
                    # print(threekrefseq)
                    if variantpos < startpos:
                        if variantpos - 1 + len(threekrefseq) > endpos + 3 - 1:
                            refseq = recdt.get(refchrom)[variantpos - 3 - 1:variantpos - 1 + len(threekrefseq)]
                            threekseq = recdt.get(refchrom)[variantpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                                refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                        else:
                            refseq = recdt.get(refchrom)[variantpos - 3 - 1:endpos + 3 - 1]
                            threekseq = recdt.get(refchrom)[
                                        variantpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                                refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                    else:
                        if variantpos - 1 + len(threekrefseq) > endpos + 3 - 1:
                            refseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1 + len(threekrefseq)]
                            threekseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                                refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                        else:
                            refseq = recdt.get(refchrom)[startpos - 3 - 1:endpos + 3 - 1]
                            threekseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                                refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                    totaldt.setdefault(f'{fline[0]}-ref', [refseq])
                    totaldt.setdefault(f'{fline[0]}-threek', [threekseq])
                    period=line.strip().split(',')[1]
                    totaldt.setdefault(f'{fline[0]}-ref', []).append(period)
                    totaldt.setdefault(f'{fline[0]}-threek', []).append(period)
    with open(f'{files.name[:-4]}forTRF.txt','w') as w:
        for k,v in totaldt.items():
            # try:
            # print(k,v)
            w.write(f'>{k}-{v[1]}\n{v[0]}\n')
            # except IndexError:
            #     continue
			
			
import re
from Bio import SeqIO
from pathlib import Path
from collections import OrderedDict
pathway=Path('/home/tanxy/3krice/01.bwamem/gatkres/lobstrres')
p=re.compile(r'\d+')
totaldt=OrderedDict()
recdt={}
for rec in SeqIO.parse(r'/home/tanxy/3krice/01.bwamem/gatkres/HipSTR/TRFzhuanshu/extractZS97_MH63_nip_of_hipstr/lobSTR/Nipponbare.fa', 'fasta'):
    recdt.setdefault(rec.id,rec.seq)
threekrefdt={}
# with open('ref.txt','w') as w:
with open('/home/tanxy/3krice/01.bwamem/gatkres/HipSTR/TRFzhuanshu/extractZS97_MH63_nip_of_hipstr/lobSTR/lobSTRref.vcf', 'r') as r:
    r.readline()  # Skip the header line
    for line in r:
        fline = line.strip().split('\t')
        refseq = fline[3]
        altseqls = fline[4].split(',')
        nip=fline[-3].split(':')[0].split('/')
        # zs97=fline[-2].split(':')[0].split('|')
        # mh63=fline[-1].split(':')[0].split('|')
        skip_line = False  # 设置标志变量

        for each in altseqls:
            if each == '.':
                skip_line = True  # 如果遇到'.'，设置标志为True
                break  # 跳出当前的最内层循环

        if skip_line:  # 检查标志
            continue  # 如果标志为True，则跳过外层循环的当前迭代
        if nip[0]=='./.':
            continue
        elif '.' in nip[0]:
            continue
        else:
            # print(nip)
            if nip[0]==nip[1]:
                if nip[0]=='0':
                    threekrefdt.setdefault(fline[0],{}).setdefault(fline[1],refseq)
                else:
                    threekrefdt.setdefault(fline[0], {}).setdefault(fline[1], altseqls[int(nip[0])-1])
        # w.write('chrom\tSTRname\tsequence\n')
        # for k,v in threekrefdt.items():
        #     for k1,v1 in v.items():
        #         w.write(f'{k}\t{k1}\t{v1}\n')


Flag=True
for files in pathway.glob('leaveonefiltermergechrom*.csv'):
    totaldt=OrderedDict()
    with open(files,'r') as r:
        refchrom=str(int(p.search(files.name).group()))
        print(refchrom)
        # print(files.name)
        for line in r:
            if line.startswith('\n'):
                continue
            elif line.startswith('lobSTR'):
                fline= line.strip().split(',')
                variantpos=int(p.search(fline[0]).group()[2:])
                startpos=int(fline[-2])
                endpos=int(fline[-1])
            elif line.startswith('period'):
                if threekrefdt.get(refchrom).get(str(variantpos)):
                    threekrefseq = threekrefdt.get(refchrom).get(str(variantpos))
                    # print(threekrefseq)
                    if variantpos < startpos:
                        if variantpos - 1 + len(threekrefseq) > endpos + 3 - 1:
                            refseq = recdt.get(refchrom)[variantpos - 3 - 1:variantpos - 1 + len(threekrefseq)]
                            threekseq = recdt.get(refchrom)[
                                        variantpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                                refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                        else:
                            refseq = recdt.get(refchrom)[variantpos - 3 - 1:endpos + 3 - 1]
                            threekseq = recdt.get(refchrom)[
                                        variantpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                                refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                    else:
                        if variantpos - 1 + len(threekrefseq) > endpos + 3 - 1:
                            refseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1 + len(threekrefseq)]
                            threekseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                                refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                        else:
                            refseq = recdt.get(refchrom)[startpos - 3 - 1:endpos + 3 - 1]
                            threekseq = recdt.get(refchrom)[startpos - 3 - 1:variantpos - 1] + threekrefseq + recdt.get(
                                refchrom)[variantpos - 1 + len(threekrefseq):endpos + 3 - 1]
                    totaldt.setdefault(f'{fline[0]}-ref', [refseq])
                    totaldt.setdefault(f'{fline[0]}-threek', [threekseq])
                    period = line.strip().split(',')[1]
                    totaldt.setdefault(f'{fline[0]}-ref', []).append(period)
                    totaldt.setdefault(f'{fline[0]}-threek', []).append(period)
    with open(f'{files.name[:-4]}forTRF.txt','w') as w:
        for k,v in totaldt.items():
            # try:
            w.write(f'>{k}-{v[1]}\n{v[0]}\n')
            # except IndexError:
            #     continue